: ${nix_script:?This is not a standalone script}

# Create and maintain Opam switches where the compiler and some tools are
# built by Nix.
#
# This brings several advantages:
#
# - The compiler and the tools might be fetched from Nix's online cache instead
#   of being built locally. Creating a switch is instant.
#
# - Several switches can share the same compiler and tools, reducing disk
#   usage.
#
# - The tools are not built by Opam and their dependencies are not installed in
#   the switch. They cannot interfere with the projects' own dependencies.
#
# - Regular nixpkgs updates and automatic GC can cause Opam switches to expire
#   on NixOS. The compiler and other binaries contain paths to C libraries in
#   the Nix store that are not recorded as GC roots and eventually disappear.

usage ()
{
  cat <<EOF
Usage:

  create <switch_name> [ocaml_version]

    'switch_name' is the name of the switch to create. It might be a path, in
    which case a local switch is created.
    It is passed as the first argument to 'opam switch create'.

    'ocaml_version' is the OCaml version that is present in Nixpkgs. Valid values
    include '4.14' but not '4.14.1'. See the sub-command 'list-available'.
    Defaults to 'default' for local switches or the prefix of 'switch_name' up
    to the first '-' character.
    For example, the default is '4.14' if the name is '4.14-foo'.
    It does not automatically detect the version in case of a local switch like
    Opam does.

  list-available

    List the OCaml versions available.

  ocamlformat [version]

    Install a specific version of OCamlformat for the current switch.
    If 'version' is not given, it will be detected automatically.
EOF
}

set -e

param_error ()
{
  echo "$1" >&2
  exit 3
}

cli_error ()
{
  echo "$1" >&2
  usage
  exit 2
}

# Empty string if couldn't be determined
detect_ocamlformat_version ()
{
  sed -nE '/^version *= *([^# ]+)( *#.*)?$/s//\1/p' .ocamlformat 2>/dev/null || true
}

# Escape and validate a Nix attribute name that can be passed to '-A' to avoid
# injections.
escape_nix_attr ()
{
  if ! [[ $1 =~ ^[a-zA-Z0-9\._\-]+$ ]]; then param_error "Invalid value '$1'"; fi
  echo "\"$1\""
}

cmd=${1:-}
shift

OPAMROOT=${OPAMROOT:-$HOME/.opam}

case "$cmd" in
  "create")
    if [[ $# -eq 0 ]]; then cli_error "Missing argument <switch_name>."; fi
    if [[ $# -gt 2 ]]; then cli_error "Too many arguments"; fi
    switch_name=$1
    if [[ $switch_name = */* ]] || [[ $switch_name = .* ]]; then
      default_version=default
    else
      default_version=${switch_name%%-*}
    fi
    ocaml_version=${2:-$default_version}

    # $out contains the compiler and tools in a hierarchy compatible with an
    # Opam switch.
    out=$(nix-build "$nix_script" --no-out-link -A "create.$(escape_nix_attr "$ocaml_version")")
    # Create an ocaml-system switch with the compiler in the PATH. Opam will
    # just call 'ocaml' to build the 'ocaml-system' package.
    PATH="$out/bin:$PATH" opam switch create "$switch_name" \
      --packages=ocaml-system --no-install
    prefix=$(opam var --switch "$switch_name" prefix)
    # Copy the compiler and tools into the created switch
    cp -rd --no-preserve=mode -T "$out" "$prefix"
    # Register a GC root to keep $out from being garbage collected
    nix-store --add-root "$prefix/nix-roots/switch" -r "$out" >/dev/null
    ;;

  "list-available")
    if [[ $# -gt 0 ]]; then cli_error "Too many arguments"; fi
    nix-instantiate --eval "$nix_script" -A list-available --strict --json | jq -j 'map(. + "\n") | add'
    ;;

  "ocamlformat")
    if [[ $# -gt 1 ]]; then cli_error "Too many arguments"; fi
    if [[ $# -eq 0 ]]; then
      v=$(detect_ocamlformat_version)
      if [[ -z $v ]]; then param_error "No version specified in '.ocamlformat'"; fi
    else
      v=$1
    fi
    prefix=$(opam var prefix)
    out=$(nix-build "$nix_script" --no-out-link -A "ocamlformat.$(escape_nix_attr "$v")")
    cp -rd --no-preserve=mode -T "$out" "$prefix"
    nix-store --add-root "$prefix/nix-roots/ocamlformat" -r "$out" >/dev/null
    ;;

  ?*) cli_error "Unknown command '$1'" ;;

  "") usage ;;
esac
