: ${nix_script:?This is not a standalone script}

usage ()
{
  cat <<EOF
Usage: $0 { create | list-available | ocamlformat } ...

  create <switch_name> [ocaml_version]
    Create an Opam switch with the compiler and tools built by Nix.

    'switch_name' might be a path, in which case a local switch is created.
    It is passed as the first argument to 'opam switch create'.

    'ocaml_version' is the OCaml version that is present in Nixpkgs.
    For a local switch, the default is the same as on Nixpkgs.
    For a global switch, the default is 'switch_name' up to the first '-'
    character. For example, the default is '4.14' if the name is '4.14-foo'.

    Valid versions include '4.14' but not '4.14.1'.
    The version is not detected automatically like Opam does.
    See the sub-command 'list-available'.

  list-available
    List the OCaml versions available.

  ocamlformat [version]
    Install a specific version of OCamlformat for the current switch.
    If 'version' is not given, it will be detected automatically.
EOF
}

set -e

param_error ()
{
  echo "$1" >&2
  exit 3
}

cli_error ()
{
  echo "$1" >&2
  usage
  exit 2
}

# Empty string if couldn't be determined
detect_ocamlformat_version ()
{
  sed -nE '/^version *= *([^# ]+)( *#.*)?$/s//\1/p' .ocamlformat 2>/dev/null || true
}

# Escape and validate a Nix attribute name that can be passed to '-A' to avoid
# injections.
escape_nix_attr ()
{
  if ! [[ $1 =~ ^[a-zA-Z0-9\._\-]+$ ]]; then param_error "Invalid value '$1'"; fi
  echo "\"$1\""
}

cmd=${1:-}
shift

OPAMROOT=${OPAMROOT:-$HOME/.opam}

case "$cmd" in
  "create")
    if [[ $# -eq 0 ]]; then cli_error "Missing argument <switch_name>."; fi
    if [[ $# -gt 2 ]]; then cli_error "Too many arguments"; fi
    switch_name=$1
    if [[ $switch_name = */* ]] || [[ $switch_name = .* ]]; then
      default_version=default
    else
      default_version=${switch_name%%-*}
    fi
    ocaml_version=${2:-$default_version}

    # An empty/invalid value won't make the installation fail
    ocamlformat_version_or_empty=$(detect_ocamlformat_version)
    # $out contains the compiler and tools in a hierarchy compatible with an
    # Opam switch.
    out=$(nix-build "$nix_script" --no-out-link \
      -A "create.$(escape_nix_attr "$ocaml_version")"\
      --argstr ocamlformat_version "$ocamlformat_version_or_empty")
    # Create an ocaml-system switch with the compiler in the PATH. Opam will
    # just call 'ocaml' to build the 'ocaml-system' package.
    # Install 'ocamlfind' before copying the compiler in the 'bin/' directory,
    # as its adding a 'ocaml' binary that calls itself in a loop in this setup
    PATH="$out/bin:$PATH" opam switch create "$switch_name" --no-install \
      --repos=default,nix-opam-switch --packages=ocaml-system,ocamlfind
    prefix=$(opam var --switch "$switch_name" prefix)
    # Copy the compiler and tools into the created switch
    cp -rd --no-preserve=mode -T "$out" "$prefix"
    # Hack: Work around system package integrity check
    rm "$prefix/.opam-switch/config/ocaml-system.config"
    # Register a GC root to keep $out from being garbage collected
    nix-store --add-root "$prefix/nix-roots/switch" -r "$out" >/dev/null
    ;;

  "list-available")
    if [[ $# -gt 0 ]]; then cli_error "Too many arguments"; fi
    nix-instantiate --eval "$nix_script" -A list-available --strict --json | jq -j 'map(. + "\n") | add'
    ;;

  "ocamlformat")
    if [[ $# -gt 1 ]]; then cli_error "Too many arguments"; fi
    if [[ $# -eq 0 ]]; then
      v=$(detect_ocamlformat_version)
      if [[ -z $v ]]; then param_error "No version specified in '.ocamlformat'"; fi
    else
      v=$1
    fi
    prefix=$(opam var prefix)
    out=$(nix-build "$nix_script" --no-out-link -A "ocamlformat.$(escape_nix_attr "$v")")
    cp -rd --no-preserve=mode -T "$out" "$prefix"
    nix-store --add-root "$prefix/nix-roots/ocamlformat" -r "$out" >/dev/null
    ;;

  ?*) cli_error "Unknown command '$cmd'" ;;

  "") usage ;;
esac
